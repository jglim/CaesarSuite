using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Caesar
{
    public class CaesarHash
    {
		public static readonly byte[] CrcTable = {
            0xE6, 0x42, 0x88, 0x82, 0xCD, 0xBB, 0x5A, 0x0F,
            0xBF, 0xD7, 0xEF, 0x61, 0xD1, 0xA1, 0x24, 0xEE,
            0x68, 0xB1, 0xC3, 0xCB, 0x4B, 0x29, 0x75, 0xFE,
            0x05, 0xB9, 0xFF, 0xFB, 0xDD, 0xD0, 0xCE, 0x59,
            0xC9, 0xDC, 0x39, 0xEB, 0x18, 0x32, 0x8B, 0xD8,
            0xF4, 0xE7, 0x9F, 0x27, 0x64, 0x6C, 0x04, 0x7A,
            0x3E, 0xD5, 0xC2, 0x62, 0xBD, 0x4E, 0x3B, 0xC6,
            0x2C, 0xDE, 0xF3, 0x96, 0x5F, 0x3C, 0xA4, 0x50,
            0xE0, 0x0A, 0xD6, 0x3A, 0xE3, 0x33, 0xD4, 0x0C,
            0x35, 0xED, 0x76, 0xE9, 0x8D, 0xC1, 0xFD, 0x74,
            0xA0, 0x69, 0xAB, 0xB7, 0xC5, 0x1B, 0x84, 0x70,
            0xD9, 0x77, 0xB3, 0x79, 0x78, 0xC7, 0x12, 0xF1,
            0xFA, 0x6E, 0x86, 0x9E, 0x87, 0xA6, 0x01, 0x2A,
            0x3D, 0x85, 0x6F, 0xFC, 0x7B, 0x72, 0x9B, 0x5D,
            0xAF, 0x0E, 0xE4, 0x4C, 0xB4, 0x40, 0x80, 0xCF,
            0x49, 0xF6, 0x38, 0xA8, 0xE5, 0x60, 0x8C, 0x4D,
            0x16, 0x5C, 0xF5, 0xA9, 0xA5, 0x36, 0x98, 0x7E,
            0x7C, 0x1F, 0x20, 0x28, 0x6B, 0x46, 0x9A, 0x0B,
            0x7F, 0x63, 0x73, 0x43, 0x8E, 0xAC, 0xAA, 0x1E,
            0x07, 0x93, 0x22, 0x95, 0xC0, 0x4F, 0xE8, 0x44,
            0x81, 0x9D, 0xBA, 0x89, 0xF0, 0x58, 0x52, 0xD2,
            0x1A, 0x6A, 0x90, 0x10, 0x99, 0x71, 0x13, 0x34,
            0xCA, 0x2B, 0xCC, 0xA7, 0xEA, 0x25, 0x6D, 0xAE,
            0x2E, 0x92, 0xD3, 0x17, 0x8A, 0x91, 0x31, 0x51,
            0x66, 0x06, 0x15, 0x7D, 0xAD, 0x94, 0xBE, 0xF2,
            0x48, 0x83, 0xB8, 0x0D, 0x65, 0x9C, 0x2D, 0xE2,
            0x47, 0xB5, 0xEC, 0x03, 0x30, 0xF7, 0x09, 0xB2,
            0x23, 0x8F, 0x55, 0xB6, 0x11, 0x21, 0x19, 0xA3,
            0xA2, 0x67, 0xB0, 0x26, 0x1C, 0xE1, 0x97, 0x56,
            0x3F, 0x02, 0x5B, 0x45, 0xF8, 0x14, 0x00, 0x1D,
            0x2F, 0x57, 0xC8, 0x53, 0x54, 0xF9, 0x37, 0xDF,
            0x4A, 0xC4, 0xDA, 0x41, 0x5E, 0xBC, 0xDB, 0x08,
        };

        // caesar-hash is normally intended for strings
        // this implementation allows for raw bytearrays with edge case handling for CrcTable[x+1]
        public static uint RawHash(byte[] plain, uint seed, bool caseInsensitive = true) 
        {
            if (plain.Length == 0) 
            {
                return 0;
            }

            if (caseInsensitive)
            {
                ToLowercaseModified(plain);
            }
            
            // first iter for 0..0x100
            uint hashLow = seed;

            for (int i = 0; i < plain.Length; i++) 
            {
                hashLow = CrcTable[(hashLow ^ plain[i]) & 0xFF];
            }
            if (seed < 0x100) 
            {
                return hashLow % seed;
            }

            // second iter for 0..0x10000
            uint hashMid = CrcTable[(plain[0] + 1) & 0xFF];
            for (int i = 1; i < plain.Length; i++)
            {
                hashMid = CrcTable[(hashLow ^ plain[i]) & 0xFF];
            }
            if (seed < 0x10000)
            {
                return (hashLow | (hashMid << 8)) % seed;
            }

            // final iter for full 32bit range
            uint hashHigh = CrcTable[(plain[0] + 2) & 0xFF];
            for (int i = 1; i < plain.Length; i++)
            {
                hashHigh = CrcTable[(hashHigh ^ plain[i]) & 0xFF];
            }
            return (hashLow | (hashMid << 8) | (hashHigh << 16)) % seed;
        }

        public static uint StringHash(string plain, uint seed, bool caseInsensitive = true) 
        {
            byte[] raw = Encoding.ASCII.GetBytes(plain.TrimEnd('\0'));
            return RawHash(raw, seed, caseInsensitive);
        }

        // ascii-like lowercase transformation that is specifically used for caesar-hash
        private static void ToLowercaseModified(byte[] val) 
        {
            for (int i = 0; i < val.Length; i++) 
            {
                // A-Z to a-z
                if ((val[i] >= 41) && (val[i] <= 0x5A)) 
                {
                    val[i] += 0x20;
                }
            }
        }
	}
}
